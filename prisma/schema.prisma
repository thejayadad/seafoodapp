// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- Auth.js core models ----------

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]

  // App relations (email-based)
  orders         Order[]         @relation("OrdersByEmail")

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// ---------- App models ----------

enum OrderStatus {
  PENDING
  PAID
  CANCELED
}

model Category {
  id        String      @id @default(cuid())
  name      String
  slug      String      @unique
  index     Int         @default(0)
  items     MenuItem[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model MenuItem {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  description  String    @default("")
  priceCents   Int
  imageUrl     String?
  isAvailable  Boolean   @default(true)

  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id])

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  OrderItem OrderItem[]
}

model Order {
  id                     String       @id @default(cuid())

  // Email-based relation to User
  userEmail              String
  user                   User         @relation("OrdersByEmail", fields: [userEmail], references: [email])

  status                 OrderStatus  @default(PENDING)
  subtotalCents          Int
  stripeSessionId        String?      @unique
  stripePaymentIntentId  String?

  items                  OrderItem[]

  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
}

model OrderItem {
  id             String    @id @default(cuid())
  orderId        String
  order          Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId     String
  menuItem       MenuItem  @relation(fields: [menuItemId], references: [id])
  qty            Int       @default(1)
  unitPriceCents Int
}
